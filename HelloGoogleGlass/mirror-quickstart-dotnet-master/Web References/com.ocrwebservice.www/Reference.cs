//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace MirrorQuickstart.com.ocrwebservice.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OCRWebServiceSoap", Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback OCRWebServiceRecognizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback OCRWebServiceLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback OCRWebServiceAvailablePagesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OCRWebService() {
            this.Url = global::MirrorQuickstart.Properties.Settings.Default.mirror_quickstart_dotnet_com_ocrwebservice_www_OCRWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event OCRWebServiceRecognizeCompletedEventHandler OCRWebServiceRecognizeCompleted;
        
        /// <remarks/>
        public event OCRWebServiceLogCompletedEventHandler OCRWebServiceLogCompleted;
        
        /// <remarks/>
        public event OCRWebServiceAvailablePagesCompletedEventHandler OCRWebServiceAvailablePagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockservice.contoso.com/wse/samples/2005/10/OCRWebServiceRecognize", RequestNamespace="http://stockservice.contoso.com/wse/samples/2005/10", ResponseNamespace="http://stockservice.contoso.com/wse/samples/2005/10", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OCRWSResponse", IsNullable=true)]
        public OCRWSResponse OCRWebServiceRecognize(string user_name, string license_code, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OCRWSInputImage OCRWSInputImage, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OCRWSSettings OCRWSSetting) {
            object[] results = this.Invoke("OCRWebServiceRecognize", new object[] {
                        user_name,
                        license_code,
                        OCRWSInputImage,
                        OCRWSSetting});
            return ((OCRWSResponse)(results[0]));
        }
        
        /// <remarks/>
        public void OCRWebServiceRecognizeAsync(string user_name, string license_code, OCRWSInputImage OCRWSInputImage, OCRWSSettings OCRWSSetting) {
            this.OCRWebServiceRecognizeAsync(user_name, license_code, OCRWSInputImage, OCRWSSetting, null);
        }
        
        /// <remarks/>
        public void OCRWebServiceRecognizeAsync(string user_name, string license_code, OCRWSInputImage OCRWSInputImage, OCRWSSettings OCRWSSetting, object userState) {
            if ((this.OCRWebServiceRecognizeOperationCompleted == null)) {
                this.OCRWebServiceRecognizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOCRWebServiceRecognizeOperationCompleted);
            }
            this.InvokeAsync("OCRWebServiceRecognize", new object[] {
                        user_name,
                        license_code,
                        OCRWSInputImage,
                        OCRWSSetting}, this.OCRWebServiceRecognizeOperationCompleted, userState);
        }
        
        private void OnOCRWebServiceRecognizeOperationCompleted(object arg) {
            if ((this.OCRWebServiceRecognizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OCRWebServiceRecognizeCompleted(this, new OCRWebServiceRecognizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockservice.contoso.com/wse/samples/2005/10/OCRWebServiceLog", RequestNamespace="http://stockservice.contoso.com/wse/samples/2005/10", ResponseNamespace="http://stockservice.contoso.com/wse/samples/2005/10", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OCRWebServiceLog(string user_name, string license_code, string from_date, string to_date, string[] reserved) {
            object[] results = this.Invoke("OCRWebServiceLog", new object[] {
                        user_name,
                        license_code,
                        from_date,
                        to_date,
                        reserved});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OCRWebServiceLogAsync(string user_name, string license_code, string from_date, string to_date, string[] reserved) {
            this.OCRWebServiceLogAsync(user_name, license_code, from_date, to_date, reserved, null);
        }
        
        /// <remarks/>
        public void OCRWebServiceLogAsync(string user_name, string license_code, string from_date, string to_date, string[] reserved, object userState) {
            if ((this.OCRWebServiceLogOperationCompleted == null)) {
                this.OCRWebServiceLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOCRWebServiceLogOperationCompleted);
            }
            this.InvokeAsync("OCRWebServiceLog", new object[] {
                        user_name,
                        license_code,
                        from_date,
                        to_date,
                        reserved}, this.OCRWebServiceLogOperationCompleted, userState);
        }
        
        private void OnOCRWebServiceLogOperationCompleted(object arg) {
            if ((this.OCRWebServiceLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OCRWebServiceLogCompleted(this, new OCRWebServiceLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockservice.contoso.com/wse/samples/2005/10/OCRWebServiceAvailablePages", RequestNamespace="http://stockservice.contoso.com/wse/samples/2005/10", ResponseNamespace="http://stockservice.contoso.com/wse/samples/2005/10", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int OCRWebServiceAvailablePages(string user_name, string license_code) {
            object[] results = this.Invoke("OCRWebServiceAvailablePages", new object[] {
                        user_name,
                        license_code});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void OCRWebServiceAvailablePagesAsync(string user_name, string license_code) {
            this.OCRWebServiceAvailablePagesAsync(user_name, license_code, null);
        }
        
        /// <remarks/>
        public void OCRWebServiceAvailablePagesAsync(string user_name, string license_code, object userState) {
            if ((this.OCRWebServiceAvailablePagesOperationCompleted == null)) {
                this.OCRWebServiceAvailablePagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOCRWebServiceAvailablePagesOperationCompleted);
            }
            this.InvokeAsync("OCRWebServiceAvailablePages", new object[] {
                        user_name,
                        license_code}, this.OCRWebServiceAvailablePagesOperationCompleted, userState);
        }
        
        private void OnOCRWebServiceAvailablePagesOperationCompleted(object arg) {
            if ((this.OCRWebServiceAvailablePagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OCRWebServiceAvailablePagesCompleted(this, new OCRWebServiceAvailablePagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWSInputImage {
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWSWord {
        
        private int topField;
        
        private int leftField;
        
        private int heightField;
        
        private int widthField;
        
        private string oCRWordField;
        
        /// <remarks/>
        public int Top {
            get {
                return this.topField;
            }
            set {
                this.topField = value;
            }
        }
        
        /// <remarks/>
        public int Left {
            get {
                return this.leftField;
            }
            set {
                this.leftField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public string OCRWord {
            get {
                return this.oCRWordField;
            }
            set {
                this.oCRWordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWSResponse {
        
        private string[][] ocrTextField;
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        private string errorMessageField;
        
        private OCRWSWord[][] ocrWSWordsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] ocrText {
            get {
                return this.ocrTextField;
            }
            set {
                this.ocrTextField = value;
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfOCRWSWord")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public OCRWSWord[][] ocrWSWords {
            get {
                return this.ocrWSWordsField;
            }
            set {
                this.ocrWSWordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWSZone {
        
        private int topField;
        
        private int leftField;
        
        private int heightField;
        
        private int widthField;
        
        private int zoneTypeField;
        
        /// <remarks/>
        public int Top {
            get {
                return this.topField;
            }
            set {
                this.topField = value;
            }
        }
        
        /// <remarks/>
        public int Left {
            get {
                return this.leftField;
            }
            set {
                this.leftField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int ZoneType {
            get {
                return this.zoneTypeField;
            }
            set {
                this.zoneTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public partial class OCRWSSettings {
        
        private OCRWS_Language[] ocrLanguagesField;
        
        private OCRWS_OutputFormat outputDocumentFormatField;
        
        private bool convertToBWField;
        
        private bool getOCRTextField;
        
        private bool createOutputDocumentField;
        
        private bool multiPageDocField;
        
        private string pageNumbersField;
        
        private OCRWSZone[] ocrZonesField;
        
        private bool ocrWordsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ocrLanguages")]
        public OCRWS_Language[] ocrLanguages {
            get {
                return this.ocrLanguagesField;
            }
            set {
                this.ocrLanguagesField = value;
            }
        }
        
        /// <remarks/>
        public OCRWS_OutputFormat outputDocumentFormat {
            get {
                return this.outputDocumentFormatField;
            }
            set {
                this.outputDocumentFormatField = value;
            }
        }
        
        /// <remarks/>
        public bool convertToBW {
            get {
                return this.convertToBWField;
            }
            set {
                this.convertToBWField = value;
            }
        }
        
        /// <remarks/>
        public bool getOCRText {
            get {
                return this.getOCRTextField;
            }
            set {
                this.getOCRTextField = value;
            }
        }
        
        /// <remarks/>
        public bool createOutputDocument {
            get {
                return this.createOutputDocumentField;
            }
            set {
                this.createOutputDocumentField = value;
            }
        }
        
        /// <remarks/>
        public bool multiPageDoc {
            get {
                return this.multiPageDocField;
            }
            set {
                this.multiPageDocField = value;
            }
        }
        
        /// <remarks/>
        public string pageNumbers {
            get {
                return this.pageNumbersField;
            }
            set {
                this.pageNumbersField = value;
            }
        }
        
        /// <remarks/>
        public OCRWSZone[] ocrZones {
            get {
                return this.ocrZonesField;
            }
            set {
                this.ocrZonesField = value;
            }
        }
        
        /// <remarks/>
        public bool ocrWords {
            get {
                return this.ocrWordsField;
            }
            set {
                this.ocrWordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public enum OCRWS_Language {
        
        /// <remarks/>
        BRAZILIAN,
        
        /// <remarks/>
        BYELORUSSIAN,
        
        /// <remarks/>
        BULGARIAN,
        
        /// <remarks/>
        CATALAN,
        
        /// <remarks/>
        CROATIAN,
        
        /// <remarks/>
        CZECH,
        
        /// <remarks/>
        DANISH,
        
        /// <remarks/>
        DUTCH,
        
        /// <remarks/>
        ENGLISH,
        
        /// <remarks/>
        ESTONIAN,
        
        /// <remarks/>
        FINNISH,
        
        /// <remarks/>
        FRENCH,
        
        /// <remarks/>
        GERMAN,
        
        /// <remarks/>
        GREEK,
        
        /// <remarks/>
        HUNGARIAN,
        
        /// <remarks/>
        INDONESIAN,
        
        /// <remarks/>
        ITALIAN,
        
        /// <remarks/>
        LATIN,
        
        /// <remarks/>
        LATVIAN,
        
        /// <remarks/>
        LITHUANIAN,
        
        /// <remarks/>
        MOLDAVIAN,
        
        /// <remarks/>
        POLISH,
        
        /// <remarks/>
        PORTUGUESE,
        
        /// <remarks/>
        ROMANIAN,
        
        /// <remarks/>
        RUSSIAN,
        
        /// <remarks/>
        SERBIAN,
        
        /// <remarks/>
        SLOVAKIAN,
        
        /// <remarks/>
        SLOVENIAN,
        
        /// <remarks/>
        SPANISH,
        
        /// <remarks/>
        SWEDISH,
        
        /// <remarks/>
        TURKISH,
        
        /// <remarks/>
        UKRAINIAN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://stockservice.contoso.com/wse/samples/2005/10")]
    public enum OCRWS_OutputFormat {
        
        /// <remarks/>
        DOC,
        
        /// <remarks/>
        PDF,
        
        /// <remarks/>
        EXCEL,
        
        /// <remarks/>
        HTML,
        
        /// <remarks/>
        TXT,
        
        /// <remarks/>
        RTF,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OCRWebServiceRecognizeCompletedEventHandler(object sender, OCRWebServiceRecognizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OCRWebServiceRecognizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OCRWebServiceRecognizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OCRWSResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OCRWSResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OCRWebServiceLogCompletedEventHandler(object sender, OCRWebServiceLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OCRWebServiceLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OCRWebServiceLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OCRWebServiceAvailablePagesCompletedEventHandler(object sender, OCRWebServiceAvailablePagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OCRWebServiceAvailablePagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OCRWebServiceAvailablePagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591